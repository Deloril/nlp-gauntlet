# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  integrate:
    runs-on: ubuntu-latest
    #if: startsWith(github.ref, 'ci/') == true

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: npm install sfdx-cli

    - name: Extract branch name
      shell: bash
      run: |
        echo "${HEAD_BRANCH}"
        echo "##[set-output name=branch;]echo "${HEAD_BRANCH}" | awk -F / '{ print $(NF-1) }' # d"
      id: extract_branch
      if: github.event_name == 'pull_request'

    - name: Validate branch name
      run: |
        echo "${{ steps.extract_branch.outputs.branch }}"
        if [[${{ steps.extract_branch.outputs.branch }} != test]]; then echo \"Error: Invalid branch package name, should be integrate/package/feature\" && exit 1 fi;

    - name: Authenticate DevHub
      shell: bash
      env:
        SALESFORCE_JWT_SECRET_KEY: ${{ secrets.SALESFORCE_JWT_SECRET_KEY }}
        SALESFORCE_CONSUMER_KEY: ${{ secrets.SALESFORCE_CONSUMER_KEY }}
        SALESFORCE_DEVHUB_USERNAME: ${{ secrets.SALESFORCE_DEVHUB_USERNAME }}
      run: |
        echo "$SALESFORCE_JWT_SECRET_KEY" > server.key
        node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid $SALESFORCE_CONSUMER_KEY --jwtkeyfile server.key --username $SALESFORCE_DEVHUB_USERNAME --setdefaultdevhubusername --setalias devhub

    - name: Create Scratch Org
      run: node_modules/sfdx-cli/bin/run force:org:create --targetdevhubusername devhub --setdefaultusername --definitionfile config/project-scratch-def.json --setalias cipkgorg --durationdays 1

    - name: Increment package version number
      run: |
        PACKAGE_VERSION_JSON="$(eval node_modules/sfdx-cli/bin/run force:package:version:list --concise --released --packages \"NLP Gauntlet - ${{ steps.extract_branch.outputs.branch }}\" --json | jq '.result | sort_by(-.MajorVersion, -.MinorVersion, -.PatchVersion, -.BuildNumber) | .[0] // ""')"
        echo $PACKAGE_VERSION_JSON
        IS_RELEASED=$(jq -r '.IsReleased?' <<< $PACKAGE_VERSION_JSON)
        MAJOR_VERSION=$(jq -r '.MajorVersion?' <<< $PACKAGE_VERSION_JSON)
        MINOR_VERSION=$(jq -r '.MinorVersion?' <<< $PACKAGE_VERSION_JSON)
        PATCH_VERSION=$(jq -r '.PatchVersion?' <<< $PACKAGE_VERSION_JSON)
        BUILD_VERSION="NEXT"
        if [ -z $MAJOR_VERSION ]; then MAJOR_VERSION=1; fi;
        if [ -z $MINOR_VERSION ]; then MINOR_VERSION=0; fi;
        if [ -z $PATCH_VERSION ]; then PATCH_VERSION=0; fi;
        if [ "$IS_RELEASED" == "true" ]; then MINOR_VERSION=$(($MINOR_VERSION+1)); fi;
        echo "##[set-output name=number;]$(echo ${MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_VERSION"})"
        echo "Version Number : ${{ steps.version.outputs.number }}"
      id: version

    - name: Create packaged version
      run: |
        export PACKAGE_VERSION_ID="$(eval node_modules/sfdx-cli/bin/run force:package:version:create --package \"NLP Gauntlet - ${{ steps.extract_branch.outputs.branch }}\" --versionnumber ${{ steps.version.outputs.number }} --installationkeybypass --skipvalidation  --wait 10 --json | jq -r '.result.SubscriberPackageVersionId')"
        echo "##[set-output name=versionid;]$(echo ${GITHUBPACKAGE_VERSION_ID_REF})"
        echo "Version Id : ${{ steps.package.outputs.versionid }}"
      id: package

    - name: Install package in scratch org
      run: |
        node_modules/sfdx-cli/bin/run force:package:list
        node_modules/sfdx-cli/bin/run force:package:install --package ${{ steps.package.outputs.versionid }} --wait 10 --publishwait 10 --noprompt

    - name: Generate password and Get username information
      run: |
        node_modules/sfdx-cli/bin/run force:user:password:generate
        SCRATCH_ORG_USERNAME="$(eval node_modules/sfdx-cli/bin/run force:user:display --json | jq -r '.result.username')"
        echo "$SCRATCH_ORG_USERNAME"