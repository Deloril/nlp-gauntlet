# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  integrate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: npm install sfdx-cli

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${HEAD_BRANCH})"
      id: extract_branch
      env:
        HEAD_BRANCH: ${{ github.head_ref }}
      if: github.event_name == 'pull_request'

    - name: Validate branch name
      run: |
        echo "${{ steps.extract_branch.outputs.branch }}"

    - name: Authenticate DevHub
      shell: bash
      env:
        SALESFORCE_JWT_SECRET_KEY: ${{ secrets.SALESFORCE_JWT_SECRET_KEY }}
        SALESFORCE_CONSUMER_KEY: ${{ secrets.SALESFORCE_CONSUMER_KEY }}
        SALESFORCE_DEVHUB_USERNAME: ${{ secrets.SALESFORCE_DEVHUB_USERNAME }}
      run: |
        echo "$SALESFORCE_JWT_SECRET_KEY" > server.key
        node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid $SALESFORCE_CONSUMER_KEY --jwtkeyfile server.key --username $SALESFORCE_DEVHUB_USERNAME --setdefaultdevhubusername --setalias devhub

    - name: Increment package version number
      run: |
        PACKAGE_VERSION_JSON="$(eval node_modules/sfdx-cli/bin/run force:package:version:list --concise --released --packages \"NLP Gauntlet - Mock\" --json | jq '.result | sort_by(-.MajorVersion, -.MinorVersion, -.PatchVersion, -.BuildNumber) | .[0] // ""')"
        echo $PACKAGE_VERSION_JSON
        IS_RELEASED=$(jq -r '.IsReleased?' <<< $PACKAGE_VERSION_JSON)
        MAJOR_VERSION=$(jq -r '.MajorVersion?' <<< $PACKAGE_VERSION_JSON)
        MINOR_VERSION=$(jq -r '.MinorVersion?' <<< $PACKAGE_VERSION_JSON)
        PATCH_VERSION=$(jq -r '.PatchVersion?' <<< $PACKAGE_VERSION_JSON)
        BUILD_VERSION="NEXT"
        if [ -z $MAJOR_VERSION ]; then MAJOR_VERSION=1; fi;
        if [ -z $MINOR_VERSION ]; then MINOR_VERSION=0; fi;
        if [ -z $PATCH_VERSION ]; then PATCH_VERSION=0; fi;
        if [ "$IS_RELEASED" == "true" ]; then MINOR_VERSION=$(($MINOR_VERSION+1)); fi;
        VERSION_NUMBER="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_VERSION"
        echo $VERSION_NUMBER